import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import yfinance as yf

# Function to fetch historical stock data
def get_stock_data(symbol, start_date, end_date):
    stock_data = yf.download(symbol, start=start_date, end=end_date)
    return stock_data

# Function to prepare data for machine learning
def prepare_data(data, target_col, n_features=10):
    data['Target'] = data[target_col].shift(-1)
    features = data.iloc[:, :-1]
    target = data.iloc[:, -1]
    
    # Drop rows with NaN values in the target variable
    data = data.dropna()

    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_features = scaler.fit_transform(features)

    X, y = [], []
    for i in range(len(scaled_features) - n_features):
        X.append(scaled_features[i:i+n_features, :])
        y.append(target.iloc[i+n_features])

    X, y = np.array(X), np.array(y)
    return X, y

# Function to split data into training and testing sets
def split_data(X, y, test_size=0.2):
    return train_test_split(X, y, test_size=test_size, random_state=42)

# Function to build and train the model
def build_model(X_train, y_train):
    # Reshape X_train to 2D array
    n_samples, n_time_steps, n_features = X_train.shape
    X_train_reshaped = X_train.reshape((n_samples, n_time_steps * n_features))

    # Check for NaN values in y_train
    if np.isnan(y_train).any():
        print("Warning: Target variable (y_train) contains NaN values.")
        # Replace NaN values with the mean of the target variable
        mean_y_train = np.nanmean(y_train)
        y_train = np.where(np.isnan(y_train), mean_y_train, y_train)

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train_reshaped, y_train)
    return model

# Function to evaluate the model
def evaluate_model(model, X_test, y_test):
    # Reshape X_test to 2D array
    n_samples, n_time_steps, n_features = X_test.shape
    X_test_reshaped = X_test.reshape((n_samples, n_time_steps * n_features))

    predictions = model.predict(X_test_reshaped)
    mae = mean_absolute_error(y_test, predictions)
    return mae

# Function to plot predictions vs actual values (interactive)
def plot_predictions_interactive(y_test, predictions):
    fig = go.Figure()

    # Plot actual prices
    fig.add_trace(go.Scatter(x=y_test.index, y=y_test.values, mode='lines', name='Actual Prices', line=dict(color='blue')))

    # Plot predicted prices
    fig.add_trace(go.Scatter(x=y_test.index, y=predictions, mode='lines', name='Predicted Prices', line=dict(color='red')))

    # Add data points for exact stock prices when hovered over
    fig.add_trace(go.Scatter(x=y_test.index, y=y_test.values, mode='markers', marker=dict(color='blue'), showlegend=False,
                             hovertemplate='<b>Date</b>: %{x|%Y-%m-%d}<br><b>Actual Price</b>: %{y:$,.2f}<extra></extra>'))

    fig.add_trace(go.Scatter(x=y_test.index, y=predictions, mode='markers', marker=dict(color='red'), showlegend=False,
                             hovertemplate='<b>Date</b>: %{x|%Y-%m-d}<br><b>Predicted Price</b>: %{y:$,.2f}<extra></extra>'))

    # Configure layout
    fig.update_layout(title='Stock Price Prediction',
                      xaxis=dict(title='Date'),
                      yaxis=dict(title='Stock Price'),
                      hovermode='x unified')

    # Show interactive plot
    fig.show()

# Main function
def main():
    # Get user input for stock symbol, start date, and end date
    symbol = input("Enter stock symbol (e.g., AAPL): ")
    start_date = input("Enter start date (YYYY-MM-DD): ")
    end_date = input("Enter end date (YYYY-MM-DD): ")

    # Fetch historical stock data
    stock_data = get_stock_data(symbol, start_date, end_date)

    # Select closing prices for prediction
    target_col = 'Close'
    X, y = prepare_data(stock_data, target_col)

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = split_data(X, y)

    # Build and train the model
    model = build_model(X_train, y_train)

    # Evaluate the model
    mae = evaluate_model(model, X_test, y_test)
    print(f'Mean Absolute Error: {mae}')

    # Make predictions on test data
    # Reshape X_test to 2D array
    n_samples, n_time_steps, n_features = X_test.shape
    X_test_reshaped = X_test.reshape((n_samples, n_time_steps * n_features))
    
    predictions = model.predict(X_test_reshaped)

    # Plot predictions vs actual values (interactive)
    plot_predictions_interactive(pd.Series(y_test, index=stock_data.index[-len(y_test):]), predictions)

if __name__ == "__main__":
    main()
